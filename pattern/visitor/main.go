//Применимость:
//Когда вам нужно выполнить какую-то операцию над всеми элементами сложной структуры объектов

//Когда над объектами сложной структуры объектов надо выполнять некоторые не связанные между
//собой операции, но вы не хотите «засорять» классы такими операциями.

// Когда новое поведение имеет смысл только для некоторых классов из существующей иерархии.
package main

import (
	"GolandProjects/L2/pattern/visitor/pkg"
	"fmt"
)

func main() {
	square := &pkg.Square{2}
	circle := &pkg.Circle{Radius: 3}
	rectangle := &pkg.Rectangle{L: 2, B: 3}

	areaCalculator := &pkg.AreaCalculation{}

	square.Accept(areaCalculator)
	circle.Accept(areaCalculator)
	rectangle.Accept(areaCalculator)

	fmt.Println("/////////////")

	x := &pkg.MiddleCoordinates{}
	square.Accept(x)
	circle.Accept(x)
	rectangle.Accept(x)

}

//Преимущества:
//Упрощает добавление операций, работающих со сложными структурами объектов.
//Объединяет родственные операции в одном классе.
//Посетитель может накапливать состояние при обходе структуры элементов.

//Недостатки:
//Паттерн не оправдан, если иерархия элементов часто меняется.
// Может привести к нарушению инкапсуляции элементов
